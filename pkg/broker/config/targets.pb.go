// Code generated by protoc-gen-go. DO NOT EDIT.
// source: targets.proto

package config

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The state of the object.
// We may add additional intermediate states if needed.
type State int32

const (
	State_UNKNOWN State = 0
	State_READY   State = 1
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "READY",
}

var State_value = map[string]int32{
	"UNKNOWN": 0,
	"READY":   1,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{0}
}

// A pubsub "queue".
type Queue struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Subscription         string   `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Queue) Reset()         { *m = Queue{} }
func (m *Queue) String() string { return proto.CompactTextString(m) }
func (*Queue) ProtoMessage()    {}
func (*Queue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{0}
}

func (m *Queue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Queue.Unmarshal(m, b)
}
func (m *Queue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Queue.Marshal(b, m, deterministic)
}
func (m *Queue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Queue.Merge(m, src)
}
func (m *Queue) XXX_Size() int {
	return xxx_messageInfo_Queue.Size(m)
}
func (m *Queue) XXX_DiscardUnknown() {
	xxx_messageInfo_Queue.DiscardUnknown(m)
}

var xxx_messageInfo_Queue proto.InternalMessageInfo

func (m *Queue) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Queue) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

// Represents a broker.
type Broker struct {
	// The id of the object. E.g. UID of the resource.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the object.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The broker address.
	// Will we have more than one address?
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// The decouple queue for the broker.
	DecoupleQueue *Queue `protobuf:"bytes,5,opt,name=decouple_queue,json=decoupleQueue,proto3" json:"decouple_queue,omitempty"`
	// All targets of the broker.
	Targets map[string]*Target `protobuf:"bytes,6,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The broker state.
	State                State    `protobuf:"varint,7,opt,name=state,proto3,enum=config.State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{1}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Broker) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Broker) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Broker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Broker) GetDecoupleQueue() *Queue {
	if m != nil {
		return m.DecoupleQueue
	}
	return nil
}

func (m *Broker) GetTargets() map[string]*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *Broker) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

// Target defines the config schema for a broker subscription target.
type Target struct {
	// The id of the object. E.g. UID of the resource.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the object.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the object.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The broker name that the trigger is referencing.
	Broker string `protobuf:"bytes,4,opt,name=broker,proto3" json:"broker,omitempty"`
	// The resolved subscriber URI of the target.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Optional filters from the trigger.
	FilterAttributes map[string]string `protobuf:"bytes,6,rep,name=filter_attributes,json=filterAttributes,proto3" json:"filter_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The retry queue for the target.
	RetryQueue *Queue `protobuf:"bytes,7,opt,name=retry_queue,json=retryQueue,proto3" json:"retry_queue,omitempty"`
	// The target state.
	State                State    `protobuf:"varint,8,opt,name=state,proto3,enum=config.State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{2}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Target) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Target) GetBroker() string {
	if m != nil {
		return m.Broker
	}
	return ""
}

func (m *Target) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Target) GetFilterAttributes() map[string]string {
	if m != nil {
		return m.FilterAttributes
	}
	return nil
}

func (m *Target) GetRetryQueue() *Queue {
	if m != nil {
		return m.RetryQueue
	}
	return nil
}

func (m *Target) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

// TargetsConfig is the collection of all Targets.
type TargetsConfig struct {
	// Keybed by broker namespace/name.
	Brokers              map[string]*Broker `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TargetsConfig) Reset()         { *m = TargetsConfig{} }
func (m *TargetsConfig) String() string { return proto.CompactTextString(m) }
func (*TargetsConfig) ProtoMessage()    {}
func (*TargetsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{3}
}

func (m *TargetsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetsConfig.Unmarshal(m, b)
}
func (m *TargetsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetsConfig.Marshal(b, m, deterministic)
}
func (m *TargetsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetsConfig.Merge(m, src)
}
func (m *TargetsConfig) XXX_Size() int {
	return xxx_messageInfo_TargetsConfig.Size(m)
}
func (m *TargetsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TargetsConfig proto.InternalMessageInfo

func (m *TargetsConfig) GetBrokers() map[string]*Broker {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func init() {
	proto.RegisterEnum("config.State", State_name, State_value)
	proto.RegisterType((*Queue)(nil), "config.Queue")
	proto.RegisterType((*Broker)(nil), "config.Broker")
	proto.RegisterMapType((map[string]*Target)(nil), "config.Broker.TargetsEntry")
	proto.RegisterType((*Target)(nil), "config.Target")
	proto.RegisterMapType((map[string]string)(nil), "config.Target.FilterAttributesEntry")
	proto.RegisterType((*TargetsConfig)(nil), "config.TargetsConfig")
	proto.RegisterMapType((map[string]*Broker)(nil), "config.TargetsConfig.BrokersEntry")
}

func init() {
	proto.RegisterFile("targets.proto", fileDescriptor_4009e2e15debba2c)
}

var fileDescriptor_4009e2e15debba2c = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x8a, 0xd4, 0x40,
	0x10, 0xb6, 0x33, 0xdb, 0x89, 0x53, 0xd9, 0x19, 0xc6, 0x62, 0x95, 0x46, 0x05, 0x87, 0xb8, 0x87,
	0xc1, 0x43, 0x0e, 0xa3, 0x82, 0x88, 0x97, 0x71, 0x5d, 0x0f, 0x0a, 0x23, 0x1b, 0x15, 0xf1, 0xb4,
	0xe4, 0xa7, 0x67, 0x69, 0x76, 0x4c, 0x62, 0x77, 0x47, 0x98, 0x47, 0xf1, 0x75, 0x7c, 0x1b, 0xdf,
	0x42, 0xd2, 0xdd, 0xd9, 0x4d, 0x64, 0x10, 0x84, 0x3d, 0xa5, 0xbb, 0xbe, 0xaf, 0xba, 0xea, 0xfb,
	0xaa, 0x02, 0x13, 0x9d, 0xca, 0x0b, 0xae, 0x55, 0x5c, 0xcb, 0x4a, 0x57, 0xe8, 0xe7, 0x55, 0xb9,
	0x11, 0x17, 0xd1, 0x0a, 0xe8, 0x59, 0xc3, 0x1b, 0x8e, 0x47, 0x40, 0x75, 0x55, 0x8b, 0x9c, 0x91,
	0x39, 0x59, 0x8c, 0x13, 0x7b, 0xc1, 0x08, 0x0e, 0x55, 0x93, 0xa9, 0x5c, 0x8a, 0x5a, 0x8b, 0xaa,
	0x64, 0x9e, 0x01, 0x07, 0xb1, 0xe8, 0x97, 0x07, 0xfe, 0x6b, 0x59, 0x5d, 0x72, 0x89, 0x53, 0xf0,
	0x44, 0xe1, 0x5e, 0xf0, 0x44, 0x81, 0x08, 0x07, 0x65, 0xfa, 0x8d, 0xbb, 0x34, 0x73, 0xc6, 0x87,
	0x30, 0x6e, 0xbf, 0xaa, 0x4e, 0x73, 0xce, 0x46, 0x06, 0xb8, 0x0e, 0x20, 0x83, 0x20, 0x2d, 0x0a,
	0xc9, 0x95, 0x62, 0x07, 0x06, 0xeb, 0xae, 0xf8, 0x0c, 0xa6, 0x05, 0xcf, 0xab, 0xa6, 0xde, 0xf2,
	0xf3, 0xef, 0x6d, 0xcb, 0x8c, 0xce, 0xc9, 0x22, 0x5c, 0x4e, 0x62, 0x2b, 0x25, 0x36, 0x3a, 0x92,
	0x49, 0x47, 0xb2, 0xb2, 0x9e, 0x43, 0xe0, 0x84, 0x33, 0x7f, 0x3e, 0x5a, 0x84, 0xcb, 0x07, 0x1d,
	0xdd, 0xb6, 0x1c, 0x7f, 0xb2, 0xe8, 0x69, 0xa9, 0xe5, 0x2e, 0xe9, 0xb8, 0xf8, 0x18, 0xa8, 0xd2,
	0xa9, 0xe6, 0x2c, 0x98, 0x93, 0xc5, 0xf4, 0xba, 0xc6, 0xc7, 0x36, 0x98, 0x58, 0xec, 0xfe, 0x3b,
	0x38, 0xec, 0x67, 0xe3, 0x0c, 0x46, 0x97, 0x7c, 0xe7, 0xe4, 0xb7, 0x47, 0x3c, 0x06, 0xfa, 0x23,
	0xdd, 0x36, 0xd6, 0x80, 0x70, 0x39, 0xed, 0x9e, 0xb1, 0x69, 0x89, 0x05, 0x5f, 0x7a, 0x2f, 0x48,
	0xf4, 0xdb, 0x03, 0xdf, 0x46, 0x6f, 0xc0, 0xc4, 0x7b, 0xe0, 0x67, 0x46, 0x9d, 0xf3, 0xd0, 0xdd,
	0xfa, 0xe6, 0xd2, 0xa1, 0xb9, 0x67, 0x70, 0x67, 0x23, 0xb6, 0x9a, 0xcb, 0xf3, 0x54, 0x6b, 0x29,
	0xb2, 0x46, 0xf3, 0xce, 0xb0, 0xe3, 0x61, 0xd3, 0xf1, 0x5b, 0xc3, 0x5b, 0x5d, 0xd1, 0xac, 0x73,
	0xb3, 0xcd, 0x5f, 0x61, 0x8c, 0x21, 0x94, 0x5c, 0xcb, 0x9d, 0x1b, 0x56, 0xb0, 0x6f, 0x58, 0x60,
	0x18, 0x76, 0x52, 0x57, 0x96, 0xdf, 0xfe, 0x87, 0xe5, 0x27, 0x70, 0x77, 0x6f, 0xfd, 0x3d, 0xde,
	0x1f, 0xf5, 0xbd, 0x1f, 0xf7, 0xbd, 0xfe, 0x49, 0x60, 0xe2, 0x06, 0x77, 0x62, 0x6a, 0xe0, 0x2b,
	0x08, 0xac, 0x45, 0x8a, 0x11, 0x23, 0x3a, 0x1a, 0x8a, 0x76, 0x3c, 0xb7, 0x33, 0xdd, 0xb2, 0xb8,
	0x94, 0x76, 0x0f, 0xfa, 0xc0, 0x7f, 0xec, 0x81, 0x4d, 0xeb, 0xf5, 0xf6, 0xe4, 0x11, 0x50, 0x23,
	0x18, 0x43, 0x08, 0x3e, 0xaf, 0xdf, 0xaf, 0x3f, 0x7c, 0x59, 0xcf, 0x6e, 0xe1, 0x18, 0x68, 0x72,
	0xba, 0x7a, 0xf3, 0x75, 0x46, 0x32, 0xdf, 0xfc, 0xbf, 0x4f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x93, 0x88, 0xbb, 0xd3, 0xd0, 0x03, 0x00, 0x00,
}
